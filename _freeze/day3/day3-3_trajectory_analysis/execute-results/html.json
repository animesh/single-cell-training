{
  "hash": "b734409141722a22a7441a2f7fe31aef",
  "result": {
    "markdown": "---\ntitle: \"Trajectory analysis\"\n---\n\n\n\n## Material\n\nLecture Alex Russel Lederer:\n\n\n{{< downloadthis ../assets/pdf/Lecture_pseudotime_velocity.pdf dname=\"Lecture_pseudotime_velocity\" label=\"Download the presentation\" icon=\"filetype-pdf\" >}}\n\n\n\nLecture Tania Wyss and Rachel Marcone:\n\n\n{{< downloadthis ../assets/pdf/Trajectories.pdf dname=\"Trajectories\" label=\"Download the presentation\" icon=\"filetype-pdf\" >}}\n\n\n{{< video https://youtu.be/FNrjzFUMOzU?si=G-ETBiHkkMe6eWfQ >}}\n\n\n\n- `slingshot` [vignette](https://www.bioconductor.org/packages/release/bioc/vignettes/slingshot/inst/doc/vignette.html)\n- [`monocle3`](https://cole-trapnell-lab.github.io/monocle3/)\n\n## Exercises\n\nLoad the following packages:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-1_d4c284fcf56cb4378ef66339cdc7581f'}\n\n```{.r .cell-code}\nlibrary(SingleCellExperiment)\nlibrary(scater)\nlibrary(slingshot)\nlibrary(ggplot2)\nlibrary(ggbeeswarm)\nlibrary(Seurat)\n```\n:::\n\n\n### Trajectory analysis using Slingshot\n\n> This part uses the `Deng` dataset\n\nFirst, download the dataset from github within your  **Terminal** tab as on Day 1:\n\n<figure>\n<img src=\"../assets/images/select_terminal_tab.png\" width=\"300\"/>\n</figure>\n\n\nType the following commands within the Terminal tab:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-2_e4bad5942b9bfe0119c036f8780213f9'}\n\n```{.bash .cell-code}\ncd course_data/\nwget https://github.com/hemberg-lab/nrg-paper-figures/raw/master/deng-reads.rds\n```\n:::\n\n\nThen, within R, import the rds file. the 'Deng' dataset is an object of class `SingleCellExperiment`.\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-3_404cba383611c1fc0eb2f2bbff6b2226'}\n\n```{.r .cell-code}\ndeng_SCE <- readRDS(\"course_data/deng-reads.rds\")\n```\n:::\n\n\nPerform the first steps of the analysis. The deng_SCE object contains cells that were isolated at different stages of mouse embryogenesis, from the zygote stage to the late blastula.\n\nThe levels of the cell type are in alphabetical order. We now change the level order for plotting in developmental order:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-4_5060ee0d09fde04ee30fe65621eed6af'}\n\n```{.r .cell-code}\ndeng_SCE$cell_type2 <- factor(deng_SCE$cell_type2,\n                              levels = c(\"zy\",\n                                         \"early2cell\",\n                                         \"mid2cell\",\n                                         \"late2cell\",\n                                         \"4cell\",\n                                         \"8cell\",\n                                         \"16cell\",\n                                         \"earlyblast\",\n                                         \"midblast\",\n                                         \"lateblast\"))\n```\n:::\n\n\nWe can run a PCA directly on the object of class `SingleCellExperiment` with the function `runPCA`:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-5_8abac0aab5e1093c92cd1780386297a3'}\n\n```{.r .cell-code}\ndeng_SCE <- scater::runPCA(deng_SCE, ncomponents = 50)\n```\n:::\n\n\nUse the `reducedDim` function to access the PCA and store the results.\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-6_dd6b248c0e0140b5367ec6e61bc2ecc5'}\n\n```{.r .cell-code}\npca <- SingleCellExperiment::reducedDim(deng_SCE, \"PCA\")\n```\n:::\n\n\nDescribe how the PCA is stored in a matrix. Why does it have this structure?\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-7_de9c96f267ec892acd50f82ce0bb2a9b'}\n\n```{.r .cell-code}\nhead(pca)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              PC1       PC2       PC3         PC4        PC5         PC6\n16cell   24.79868 -62.20826  8.035201 -2.07391816  2.1297390 -14.0930954\n16cell.1 28.77121 -50.35974 13.607012  0.08664449  0.9454185  -3.5987880\n16cell.2 26.67901 -61.03875  7.239352 -6.60967794 -1.0775002 -11.8876579\n16cell.3 29.01151 -56.03620  6.433057  2.85332708 -4.2885083   0.1488504\n16cell.4 26.38026 -58.09265  4.671850  7.99519397  9.8077416  -2.0570042\n16cell.5 24.90566 -60.77897  5.632497 -3.80156587  9.8835527 -11.9028394\n                PC7        PC8       PC9      PC10      PC11        PC12\n16cell   -2.4645020 -1.6350660  7.202260  9.862212 10.660702  -0.6401721\n16cell.1 -2.1726663  3.3481641  8.967394  6.664942 14.493227 -11.7471565\n16cell.2  7.9007309 -0.3368756  6.032645  5.295515 15.384993  -4.2930696\n16cell.3  4.3727592  1.1582470  1.520145 -8.789699 19.386866   0.4999047\n16cell.4  0.6031572  3.6743278  5.793753 10.823787  7.613724  -4.7288640\n16cell.5  4.3269009 -3.8968881 11.805221  9.798854 11.016137 -19.1535086\n               PC13      PC14       PC15       PC16       PC17      PC18\n16cell     5.716841  6.544614  -6.652210  -3.458346  -4.499013 11.360753\n16cell.1 -13.284708 -4.206404  -8.721043  -7.926277  -0.703508  5.418131\n16cell.2  -9.633173  1.672498  -9.609001  -9.302794 -10.219743  5.763834\n16cell.3 -14.177687 -8.509097  -6.978210  10.771078  -6.188808 -6.504081\n16cell.4  -3.106382 -4.078414 -10.739979 -12.032452  -6.239499 -2.331292\n16cell.5  -9.544362 -2.255400  -8.614958  -2.832196  -1.798584 -2.321082\n                PC19      PC20       PC21       PC22      PC23       PC24\n16cell     2.2617345  2.456274 -11.227414  1.7122827  8.418641  -4.254968\n16cell.1 -11.8613891 -4.069530  -9.320831  0.5802347 11.878096   6.412425\n16cell.2  -3.3460356 -4.165813  -2.031473 -2.1106373  1.762218   1.135134\n16cell.3  -0.6042649 -6.008176  -9.982856  9.4888653 -2.822138 -12.871921\n16cell.4   3.9402029  0.298227 -10.773722 -0.6374236 -4.730329  -4.670391\n16cell.5  -2.0280791 -5.050525   3.252243 -7.1527175  9.923140   1.791511\n              PC25      PC26       PC27      PC28        PC29       PC30\n16cell   -4.049629  4.133374 -0.6235391  3.381254 13.94917609  -8.217824\n16cell.1 -8.052083  8.334263 -0.5815629 -4.592214  1.32417854   5.266909\n16cell.2 -2.326133  3.775858 -2.3388745  6.947394  0.08121559  -2.942813\n16cell.3 -5.860750  1.869659  7.0402429 -5.092207 -2.53575943 -18.529304\n16cell.4 -4.291113 13.005331  3.2802102 -4.606226 -3.52531994  -3.599833\n16cell.5  4.708265  5.717693  1.1023767 -9.761377 -4.57312078 -12.138646\n              PC31      PC32       PC33      PC34       PC35       PC36\n16cell    6.897320  5.675943 -8.6076039 -3.713348 -0.9099737  4.7467546\n16cell.1  4.538307 -9.166969  9.4525575 -8.848231 -2.0782319  7.4318993\n16cell.2 -3.082470  2.207176 -0.5365986 -3.895378  7.4493361  0.7465149\n16cell.3 -1.680117  3.839556 13.3156066 -6.257479 -4.1112596  0.2780589\n16cell.4 13.314741  1.453554 -0.1334034  2.941487 -0.8162660 -2.9940693\n16cell.5  4.608498 12.180530 -5.8667454  6.645273  1.0224859  0.8960299\n              PC37       PC38       PC39       PC40       PC41       PC42\n16cell   -9.063470  5.2765051 -1.1758453  -9.474215  -3.559391  4.7781174\n16cell.1 -6.217009 -1.0216459 -0.5798035 -21.705585   3.570104 -2.3279923\n16cell.2 -6.227582 -3.0863112 -8.6153521   1.401230  -2.266017 -0.8150665\n16cell.3 -8.411600 -3.7169411  0.7050601  -2.959623   3.123082 -1.0916370\n16cell.4  2.871774  4.2664023  7.4894594   8.207422  -4.223035  1.4763577\n16cell.5 10.169730 -0.3923632  9.3346900  -8.114487 -11.186021  4.5635674\n                PC43      PC44      PC45      PC46        PC47      PC48\n16cell    7.92280920  8.558202 -7.058962 -3.058209  -0.5723868  4.674968\n16cell.1 -5.60067538 -8.717056  6.480960 -8.554813 -13.1868734  3.397925\n16cell.2 -5.25328813  5.803788 -2.726822 -1.241769   7.4824411 -4.088434\n16cell.3  0.05135525  2.181424 -2.404780 -8.691230   8.9700020 -3.713560\n16cell.4 -1.55019721 -4.946841 -0.520753  3.068227  10.7801144  5.167676\n16cell.5  9.98211744  8.759947  3.727758  9.064882  -1.7524459 -3.306604\n              PC49      PC50\n16cell   -2.936203  3.598746\n16cell.1 -3.420297 -3.489052\n16cell.2  4.446149 -0.235609\n16cell.3 -5.179723  9.719219\n16cell.4 -1.077690  3.049430\n16cell.5  5.019110  0.925972\n```\n:::\n:::\n\n\nAdd PCA data to the deng_SCE object.\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-8_715821a37ffd6c33f24296255cac4682'}\n\n```{.r .cell-code}\ndeng_SCE$PC1 <- pca[, 1]\ndeng_SCE$PC2 <- pca[, 2]\n```\n:::\n\n\nPlot PC biplot with cells colored by cell_type2.\n`colData(deng_SCE)` accesses the cell metadata `DataFrame` object for `deng_SCE`.\nLook at Figure 1A of the [paper](https://science.sciencemag.org/content/343/6167/193) as a comparison to your PC biplot.\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-9_b9f13c73ed4ef3253255aacc6409850c'}\n\n```{.r .cell-code}\nggplot(as.data.frame(colData(deng_SCE)), aes(x = PC1, y = PC2, color = cell_type2)) +\n  geom_point(size=2, shape=20) +\n  theme_classic() +\n  xlab(\"PC1\") + ylab(\"PC2\") + ggtitle(\"PC biplot\")\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nPCA is a simple approach and can be good to compare to more complex algorithms\ndesigned to capture differentiation processes. As a simple measure of pseudotime\nwe can use the coordinates of PC1.\nPlot PC1 vs cell_type2.\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-10_b6afc8d321d6dd8e2214a66be9d4dd61'}\n\n```{.r .cell-code}\ndeng_SCE$pseudotime_PC1 <- rank(deng_SCE$PC1)  # rank cells by their PC1 score\n```\n:::\n\n\nCreate a jitter plot\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-11_a05c4f0b1d8d379276f9d4639acf766a'}\n\n```{.r .cell-code}\nggplot(as.data.frame(colData(deng_SCE)), aes(x = pseudotime_PC1, y = cell_type2,\n                                             colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"PC1\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by first principal component\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nOrientation inferred to be along y-axis; override with\n`position_quasirandom(orientation = 'x')`\n```\n:::\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nRead the Slingshot documentation (`?slingshot::slingshot`) and then run Slingshot below.\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-12_fa1537895d1765fe9773c5c4b88819aa'}\n\n```{.r .cell-code}\nsce <- slingshot::slingshot(deng_SCE, reducedDim = 'PCA')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNo cluster labels provided. Continuing with one cluster.\n```\n:::\n:::\n\n\n::: {.callout-important}\n## Exercise\nGiven your understanding of the algorithm and the documentation, what is one\nmajor set of parameters we omitted here when running Slingshot?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\nWe didn't set the parameter `clusterLabels`\n:::\n\nHere is a custom function to plot the PCA based on a `slingshot` object. Run it in the console to add it to your global environment:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-13_66c59f80d6f4c579482e730c9b85d75d'}\n\n```{.r .cell-code}\nPCAplot_slingshot <- function(sce, draw_lines = TRUE, variable = NULL, legend = FALSE, ...){\n  # set palette for factorial variables\n  palf <- colorRampPalette(RColorBrewer::brewer.pal(8, \"Set2\"))\n  # set palette for numeric variables\n  paln <- colorRampPalette(RColorBrewer::brewer.pal(9, \"Blues\"))\n  # extract pca from SingleCellExperiment object\n  pca <- SingleCellExperiment::reducedDims(sce)$PCA\n  \n  if(is.null(variable)){\n    col <- \"black\"\n  }\n  if(is.character(variable)){\n    variable <- as.factor(variable)\n  }\n  if(is.factor(variable)){\n    colpal <- palf(length(levels(variable)))\n    colors <- colpal[variable]\n  }\n  if(is.numeric(variable)){\n    colpal <- paln(50)\n    colors <- colpal[cut(variable,breaks=50)]\n  }\n  \n  # draw the plot\n  plot(pca, bg = colors, pch = 21)\n  # draw lines\n  if(draw_lines){\n    lines(slingshot::SlingshotDataSet(sce), lwd = 2, ... )\n  }\n  # add legend\n  if(legend & is.factor(variable)){\n    legend(\"bottomright\", pt.bg = colpal,legend = levels(variable),pch=21)\n    \n  }\n}\n```\n:::\n\n\nHave a look at the PCA with the slingshot pseudotime line:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-14_39579d39d59d90bdb6cc5f41ad03a85d'}\n\n```{.r .cell-code}\nPCAplot_slingshot(sce, variable = sce$slingPseudotime_1, draw_lines = TRUE)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nAlso have a look at pseudotime versus cell type:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-15_5585b7da86531b7b093c3433f93e5a77'}\n\n```{.r .cell-code}\nggplot(as.data.frame(colData(deng_SCE)), aes(x = sce$slingPseudotime_1,\n                                             y = cell_type2,\n                                             colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"Slingshot pseudotime\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by Slingshot pseudotime\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nOrientation inferred to be along y-axis; override with\n`position_quasirandom(orientation = 'x')`\n```\n:::\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThis already looks pretty good. Let's see whether we can improve it. First we generate clusters by using `Seurat`:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-16_72b8703344403a4a12ec5d07d5ca2390'}\n\n```{.r .cell-code}\ngcdata <- Seurat::CreateSeuratObject(counts = SingleCellExperiment::counts(deng_SCE),\n                                     project = \"slingshot\")\n\ngcdata <- Seurat::NormalizeData(object = gcdata,\n                                normalization.method = \"LogNormalize\",\n                                scale.factor = 10000)\n\ngcdata <- Seurat::FindVariableFeatures(object = gcdata,\n                                       mean.function = ExpMean,\n                                       dispersion.function = LogVMR)\n\ngcdata <- Seurat::ScaleData(object = gcdata,\n                            do.center = T,\n                            do.scale = F)\n\ngcdata <- Seurat::RunPCA(object = gcdata,\n                         pc.genes = gcdata@var.genes)\n\ngcdata <- Seurat::FindNeighbors(gcdata,\n                                reduction = \"pca\",\n                                dims = 1:5)\n\n# clustering with resolution of 0.6\ngcdata <- Seurat::FindClusters(object = gcdata,\n                               resolution = 0.6)\n```\n:::\n\n\nNow we can add these clusters to the `slingshot` function:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-17_3d651ecd1093ce37af3f71e2d4ee4c6b'}\n\n```{.r .cell-code}\ndeng_SCE$Seurat_clusters <- as.character(Idents(gcdata))  # go from factor to character\n\nsce <- slingshot::slingshot(deng_SCE,\n                            clusterLabels = 'Seurat_clusters',\n                            reducedDim = 'PCA',\n                            start.clus = \"2\")\n```\n:::\n\n\nCheck how the slingshot object has evolved\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-18_b2518cd93209fad5230c1fd6ee8abf01'}\n\n```{.r .cell-code}\nSlingshotDataSet(sce)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass: SlingshotDataSet \n\n Samples Dimensions\n     268         50\n\nlineages: 2 \nLineage1: 2  4  0  5  3  \nLineage2: 2  4  1  \n\ncurves: 2 \nCurve1: Length: 425.94\tSamples: 234.63\nCurve2: Length: 341\tSamples: 132.38\n```\n:::\n:::\n\n\nPlot PC1 versus PC2 colored by slingshot pseudotime:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-19_02ff5208095c33f5409bc8f277ac1619'}\n\n```{.r .cell-code}\nPCAplot_slingshot(sce, variable = sce$slingPseudotime_2)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nPlot Slingshot pseudotime vs cell stage.\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-20_fce6114bc5d97c051982dc7af9f16fe2'}\n\n```{.r .cell-code}\nggplot(data.frame(cell_type2 = deng_SCE$cell_type2,\n                  slingPseudotime_1 = sce$slingPseudotime_1),\n       aes(x = slingPseudotime_1, y = cell_type2,\n           colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"Slingshot pseudotime\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by Slingshot pseudotime\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nOrientation inferred to be along y-axis; override with\n`position_quasirandom(orientation = 'x')`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 29 rows containing missing values (`position_quasirandom()`).\n```\n:::\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data.frame(cell_type2 = deng_SCE$cell_type2,\n                  slingPseudotime_2 = sce$slingPseudotime_2),\n       aes(x = slingPseudotime_2, y = cell_type2,\n           colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"Slingshot pseudotime\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by Slingshot pseudotime\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nOrientation inferred to be along y-axis; override with\n`position_quasirandom(orientation = 'x')`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 134 rows containing missing values (`position_quasirandom()`).\n```\n:::\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-20-2.png){width=672}\n:::\n:::\n\n\nParticularly the later stages, separation seems to improve. Since we have included the Seurat clustering, we can plot the PCA, with colors according to these clusters:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-21_248c3c8788b75e1bf6eccc37dcd78d29'}\n\n```{.r .cell-code}\nPCAplot_slingshot(sce,\n                  variable = deng_SCE$Seurat_clusters,\n                  type = 'lineages',\n                  col = 'black',\n                  legend = TRUE)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\nPCAplot_slingshot(sce,\n                  variable = deng_SCE$cell_type2,\n                  type = 'lineages',\n                  col = 'black',\n                  legend = TRUE)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n:::\n\n\n::: {.callout-important}\n## Exercise\nInstead of providing an initial cluster, think of an end cluster that would fit this trajectory analysis and perform the slingshot analysis. Does slingshot find the initial cluster corresponding to the biological correct situation?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-22_e85df1354974701ed7025b5dc347fc8e'}\n\n```{.r .cell-code}\nsce <- slingshot::slingshot(deng_SCE,\n                            clusterLabels = 'Seurat_clusters',\n                            reducedDim = 'PCA',\n                            end.clus = c(\"0\", \"3\", \"5\")) ## check which would be the best according to bio\n```\n:::\n\n:::\n\nClear your environment:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-23_21e0fa185d971e72fb571e14532f79d2'}\n\n```{.r .cell-code}\nrm(list = ls())\ngc()\n.rs.restartR()\n```\n:::\n\n\n### Trajectory analysis with `monocle3`\n\nThis part showcases how you can use `monocle3` to perform a trajectory analysis. First load the `seu` dataset:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-24_bddffbeb4c4fca346f45595300e97147'}\n\n```{.r .cell-code}\nseu <- readRDS(\"seu_day2-4.rds\")\n```\n:::\n\n\nLoad the required package into your environment:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-25_c15709475eb67fb4c63243c3c95c8918'}\n\n```{.r .cell-code}\nlibrary(monocle3)\n```\n:::\n\n\nGenerate a `monocle3` object (with class `cell_data_set`) from our `Seurat` object:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-26_69fa95617282dba1e492a2cfa459086d'}\n\n```{.r .cell-code}\n# create gene metadata data.frame\nfeature_names <- as.data.frame(rownames(seu))\nrownames(feature_names) <- rownames(seu)\ncolnames(feature_names) <- \"gene_short_name\"\n\n# initiate monocle object from seurat count table \nseu_monocl <- monocle3::new_cell_data_set(Seurat::GetAssayData(seu,\n                                                               layer = \"counts\"),\n                                          cell_metadata = seu@meta.data,\n                                          gene_metadata = feature_names)\n```\n:::\n\n\nWe pre-process the newly created object. What does it involve? Check:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-27_c3902b65e2f443c5ba0aee424d04367d'}\n\n```{.r .cell-code}\n?preprocess_cds\n```\n:::\n\n\nPreprocess the dataset:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-28_a3f89f9307443a140f9520df07eecf4e'}\n\n```{.r .cell-code}\nseu_monocl <- monocle3::preprocess_cds(seu_monocl)\n```\n:::\n\n\nAnd check out the elbow plot:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-29_4b54d805ba2fcca2a5da0274b2686237'}\n\n```{.r .cell-code}\nmonocle3::plot_pc_variance_explained(seu_monocl)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nPerform UMAP using the implementation in the `monocle3` package and its default parameters:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-30_e6c67f91f77bf50ded3e6b003acaf47f'}\n\n```{.r .cell-code}\nseu_monocl <- monocle3::reduce_dimension(seu_monocl, reduction_method = \"UMAP\")\n```\n:::\n\n\nPlot the `monocle3` UMAP coloring cells according to the cluster ID, marker gene or annotation that were stored in the `Seurat` object:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-31_072ef38d27f2f6c9024c09d166dce0f9'}\n\n```{.r .cell-code}\nmonocle3::plot_cells(seu_monocl, \n                     color_cells_by = \"RNA_snn_res.0.3\", \n                     cell_size = 1, \n                     show_trajectory_graph = FALSE)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmonocle3::plot_cells(seu_monocl, genes = \"CD79A\", \n                     cell_size = 1,\n                     show_trajectory_graph = FALSE,\n                     scale_to_range = FALSE)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-31-2.png){width=672}\n:::\n\n```{.r .cell-code}\nmonocle3::plot_cells(seu_monocl, \n                     color_cells_by = \"SingleR_annot\", \n                     cell_size = 1, \n                     show_trajectory_graph = FALSE)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-31-3.png){width=672}\n:::\n:::\n\n\nCluster cells using `monocle3`'s clustering function:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-32_8da718e6bec4c7f005c84c3a4aafbd3e'}\n\n```{.r .cell-code}\nseu_monocl <- monocle3::cluster_cells(seu_monocl, resolution=0.00025)\nmonocle3::plot_cells(seu_monocl, label_cell_groups = F)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNo trajectory to plot. Has learn_graph() been called yet?\n```\n:::\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nlearn graph (i.e. identify trajectory) using `monocle3` UMAP and clustering:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-33_03e57d3059704033bd8c63a94ffd764e'}\n\n```{.r .cell-code}\nseu_monocl <- monocle3::learn_graph(seu_monocl)\n```\n:::\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-34_0eac8ca866f35c27a2f602dd1852757c'}\n\n```{.r .cell-code}\nmonocle3::plot_cells(seu_monocl)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-important}\n## Exercise\nFind the CD34+ B-cell cluster in the monocle UMAP. This cluster has a high expressession of CD79A and expresses CD34.\n::: \n\n::: {.callout-tip collapse=\"true\"}\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-35_2a348094e8c1ea4b009084e5927ea049'}\n\n```{.r .cell-code}\nmonocle3::plot_cells(seu_monocl, genes = c(\"CD79A\", \"CD34\"),\n                     show_trajectory_graph = FALSE, \n                     cell_size = 0.7, group_label_size = 4)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nCluster 11 has both a high expression of CD79A and CD34. \n\n:::\n\nSelect the \"initial\" cells in the B-cell cluster to calculate pseudotime. The initial cells in this case are the CD34+ B-cells we have just identified. A pop up window will open and you need to click on the \"initial\" cells (one node per trajectory), then click \"Done\".\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-36_b1345b490e5b01c23e76181141143efd'}\n\n```{.r .cell-code}\nseu_monocl <- monocle3::order_cells(seu_monocl)\n```\n:::\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-37_a4a936244b56754fbc88be54b00549a6'}\n\n:::\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-38_be4838471c4d3bc6708915bcff006b85'}\n\n```{.r .cell-code}\nmonocle3::plot_cells(seu_monocl,\n                     color_cells_by = \"pseudotime\",\n                     label_cell_groups=F,\n                     label_leaves=F,\n                     label_branch_points=FALSE,\n                     graph_label_size=1.5, cell_size = 1)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nIn order to find genes which expression is affected by pseudtime, we first have to isolate the B-cell cluster. Therefore, extract all cells in the B-cell cluster with the interactive `choose_cells` function:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-39_8023fffd5c748aca6b01f7416dd7abdd'}\n\n```{.r .cell-code}\nseuB <- choose_cells(seu_monocl)\n```\n:::\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-40_c61f2345c5943a62d0a931b94c445576'}\n\n:::\n\n\n<figure>\n<img src=\"../assets/images/choose_cells.gif\" width=\"500\"/>\n</figure>\n\n\nCheck whether you have selected the right cells:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-41_b2dd4ecf1ff5444330dee522da13d1aa'}\n\n```{.r .cell-code}\nplot_cells(seuB, show_trajectory_graph = FALSE, cell_size = 1,\n           color_cells_by = \"pseudotime\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCells aren't colored in a way that allows them to be grouped.\n```\n:::\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nNow we can use the cells in this trajectory to test which genes are affected by the trajectory:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-42_0541877e2f32ca7b589b80839898f8fa'}\n\n```{.r .cell-code}\npr_test <- graph_test(seuB, \n                      cores=4, \n                      neighbor_graph = \"principal_graph\")\n```\n:::\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-43_7ad447ff305e5a88077f0c3f9216bd1f'}\n\n```{.r .cell-code}\n# order by test statistic\npr_test <- pr_test[order(pr_test$morans_test_statistic, \n                         decreasing = TRUE),]\n```\n:::\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-44_124cbedce808011d1c5e7df53c1132d5'}\n::: {.cell-output-display}\n|      |status | p_value| morans_test_statistic|  morans_I|gene_short_name | q_value|\n|:-----|:------|-------:|---------------------:|---------:|:---------------|-------:|\n|HBB   |OK     |       0|             101.29233| 0.8472319|HBB             |       0|\n|HBA2  |OK     |       0|             100.44956| 0.8405222|HBA2            |       0|\n|PTMA  |OK     |       0|              91.60811| 0.7662323|PTMA            |       0|\n|HBA1  |OK     |       0|              91.58533| 0.7663894|HBA1            |       0|\n|STMN1 |OK     |       0|              86.86541| 0.7263461|STMN1           |       0|\n|TOP2A |OK     |       0|              84.45458| 0.7067213|TOP2A           |       0|\n:::\n:::\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-45_671b787b6e85549a3114fd7c8b93c917'}\n\n```{.r .cell-code}\nView(pr_test)\n```\n:::\n\n\nThere are some interesting genes in there, for example related to cell cycling (MKI67, CKS2), related to B-cell development (CD34, MS4A1) and immunoglobulins (IGLL1 and IGLL5). We can plot those in the UMAP:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-46_7f7a385515df08e1ee85252971c89029'}\n\n```{.r .cell-code}\ngoi <- c(\"CD34\", \"MS4A1\", \"IGLL1\", \"IGLL5\", \n         \"MKI67\", \"CKS2\")\nplot_cells(seuB, label_cell_groups=FALSE, genes = goi,\n           show_trajectory_graph=FALSE, cell_size = 1)\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\nBut also against pseudotime:\n\n\n::: {.cell hash='day3-3_trajectory_analysis_cache/html/unnamed-chunk-47_08ef633a0b67fc20d8a7dd436266f0da'}\n\n```{.r .cell-code}\nseuB@colData$monocle_cluster <- clusters(seuB)\n\nplot_genes_in_pseudotime(subset(seuB, \n                                rowData(seuB)$gene_short_name %in% goi),\n                         min_expr=0.5, color_cells_by = \"monocle_cluster\")\n```\n\n::: {.cell-output-display}\n![](day3-3_trajectory_analysis_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}